@model VacationManager.WEB.Models.VacationViewModel
@{
    ViewBag.Title = "Home Page";
    // string tt = "/User/Details?id=" + @User.Identity.GetUserIdGuid();
}
@*@System.Configuration.ConfigurationManager.AppSettings["UnobtrusiveJavaScriptEnabled"]*@
<link href="~/Content/css/js-year-calendar.min.css" rel="stylesheet" />
<link rel="stylesheet" type="text/css" href="https://unpkg.com/bootstrap-datepicker@1.8.0/dist/css/bootstrap-datepicker.standalone.min.css" />
<div class="jumbotron">
    <div>
        <label>
            <input type="checkbox" name="group1[]" />Rainbow
        </label>
        <label>
            <input type="checkbox" name="group1[]" />OrderStatus
        </label>
        <label>
            <input type="checkbox" name="group1[]" />HeatMap
        </label>
    </div>
    <div>
        <label>
            <input type="checkbox" name="" />Hide Pending
        </label>
        <label>
            <input type="checkbox" name="" />Hide Denied
        </label>
    </div>
</div>

<div class="calendar" id="calendar"></div>
@*@Html.Partial("_Modal", new ViewDataDictionary { })*@
@Html.Partial("_ModalBody", new ViewDataDictionary { { "Id", "event-modal" }, { "Title", "Vacation Form" }, { "ViewName", "_VacationCreateForm" } })
@Html.Partial("_ModalBody", new ViewDataDictionary { { "Id", "exampleModal" }, { "Title", "Vacation Status" }, { "ViewName", "_VacationSetStatus" } })

@section scripts {
    <script src=@Url.Content("~/Scripts/js/js-year-calendar.min.js")></script>
    <script src=@Url.Content("~/Scripts/locales/js-year-calendar.ru.js")></script>
    <script>
        function editEvent(event) {
            $('#event-modal input[name="event-index"]').val(event ? event.id : '');
            $('#event-modal input[name="event-name"]').val(event ? event.name : '');
            $('#event-modal input[name="event-location"]').val(event ? event.location : '');
            $('#event-modal input[name="DateStart"]').datepicker({ format: "dd/M/yy" });
            $('#event-modal input[name="DateStart"]').datepicker('update', event ? event.startDate : '');
            $('#event-modal input[name="DateEnd"]').datepicker({ format: "dd/M/yy" });
            $('#event-modal input[name="DateEnd"]').datepicker('update', event ? event.endDate : '');
            $('#event-modal').modal();
        }

        function deleteEvent(event) {
            var dataSource = calendar.getDataSource();
            calendar.setDataSource(dataSource.filter(item => item.id === event.id));
        }

        function saveEvent() {
            var event = {
                id: $('#event-modal input[name="event-index"]').val(),
                name: $('#event-modal input[name="event-name"]').val(),
                location: $('#event-modal input[name="event-location"]').val(),
                startDate: $('#event-modal input[name="DateStart"]').datepicker('getDate'),
                endDate: $('#event-modal input[name="DateEnd"]').datepicker('getDate')
            }

            //var dataSource = calendar.getDataSource();

            //if (event.id) {
            //    for (var i in dataSource) {
            //        if (dataSource[i].id === event.id) {
            //            dataSource[i].name = event.name;
            //            dataSource[i].location = event.location;
            //            dataSource[i].startDate = event.startDate;
            //            dataSource[i].endDate = event.endDate;
            //        }
            //    }
            //} else {
            //    var newId = 0;
            //    for (var i in dataSource) {
            //        if (dataSource[i].id > newId) {
            //            newId = dataSource[i].id;
            //        }
            //    }
            //    newId++;
            //    event.id = newId;
            //    dataSource.push(event);
            //}

            //calendar.setDataSource(dataSource);
            $('#event-modal').modal('hide');
        }

        $('#save-event').click(function () {
            saveEvent();
        });
    </script>
    <script>
        var hidePending = false;
        var hideDenied = false;
        var currentYear = new Date().getFullYear();
        var DBSource;
        function DataSourceFilter(currentYear) {
            let dbClone = DBSource.filter(event => event.startDate.getFullYear() === currentYear);
            if (hideDenied)
                dbClone = dbClone.filter(event => event.status !== -1);
            if (hidePending)
                dbClone = dbClone.filter(event => event.status !== 0);
            return dbClone;
        }


        function OnDayContentRenderer(events) {
            let content = '';
            for (let i in events) {
                let color;
                let bg;
                if (events[i].status == -1) {
                    color = '#ff4040';
                    bg = 'bg-danger';
                }
                if (events[i].status == 0) {
                    color = '#ede500'; //#ffff40';
                    bg = 'bg-warning';
                }
                if (events[i].status == 1) {
                    color = '#40ff40';
                    bg = 'bg-success';
                }
                content += '<div class="event-tooltip-content">'
                    + '<div class="event-name" style="color:' + events[i].color + ';">' + events[i].name + ' (' + events[i].location + ')' + '</div>'
                    // + '<div class="event-location">' + events[i].location + '</div>'
                    + '<div class="event-date" style="border-bottom: 4px solid ' + color + ';">From ' + moment(events[i].startDate).format('ll') + ' To ' + moment(events[i].endDate).format('ll') + '</div>'
                    + '</div>';
            }
            return content;
        }

        const calendar = new Calendar('.calendar',
            {
                language: "@System.Globalization.CultureInfo.CurrentCulture",
                displayWeekNumber: true,
                minDate: new Date(),
                enableContextMenu: true,
                enableRangeSelection: true,
                contextMenuItems: [
                    {
                        text: 'Update',
                        click: editEvent
                    },
                    {
                        text: 'Delete',
                        click: deleteEvent
                    },
                    {
                        text: 'Details',
                        // click

                    }
                ],
                selectRange: function(e) {
                    editEvent({ startDate: e.startDate, endDate: e.endDate });
                },
                mouseOnDay: function(e) {
                    if (e.events.length > 0) {
                        var content = '';
                        content += OnDayContentRenderer(e.events);

                       // for (var i in e.events) {
                       //     content += "*" //'<div class="event-tooltip-content">' +
                            //'<div class="event-name" style="color:' +
                            //e.events[i].color +
                            //'">' +
                            //e.events[i].name +
                            //'</div>' +
                            //'<div class="event-location">' +
                            //e.events[i].location +
                            //'</div>' +
                            //'</div>';
                        //}

                        $(e.element).popover({
                            trigger: 'manual',
                            container: 'body',
                            html: true,
                            content: content
                        });

                        $(e.element).popover('show');
                    }
                },
                mouseOutDay: function(e) {
                    if (e.events.length > 0) {
                        $(e.element).popover('hide');
                    }
                },
                dayContextMenu: function(e) {
                    $(e.element).popover('hide');
                },
                // dataSource: DataSourceFilter(currentYear)
            });

        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min)) + min;
        }

        document.querySelector('.calendar').addEventListener("yearChanged",
            function(e) {
                calendar.setDataSource(null);
                $.ajax({
                    url: `/Vacation/GetAllVacationJson?dateStart=${calendar.getYear()}-01-01&dateEnd=${
                        calendar.getYear() + 1}-01-10`,
                    type: "GET",
                    success: function(data) {
                        let eventsList = [];
                        console.log(data);
                        data.forEach(d => {
                            let event = {
                                startDate: new Date(parseInt(d.DateStart.substr(6, 13))),
                                endDate: new Date(parseInt(d.DateEnd.substr(6, 13))),
                                status: getRandomInt(-1, 2)
                            };
                            eventsList.push(event);
                        });
                        DBSource = eventsList;
                        calendar.setDataSource(DataSourceFilter(calendar.getYear()));
                        // console.log(ff(calendar.getYear()));
                        // calendar.setDataSource(ff(calendar.getYear()));
                        // calendar.setDataSource(eventsList);
                    }
                });
            });

        document.querySelector('.calendar').dispatchEvent(new Event("yearChanged"));


        calendar.setStyle('custom');
        var HeatMap = function (element, currentDate, events) {
            let count = 0;
            events.forEach(event => {
                if (currentDate >= event.startDate && currentDate <= event.endDate) {
                    count++;
                }
            });
            if (count > 3) count = 3;
            element.parentElement.setAttribute("data", "lvl-" + count);
        }

        var Rainbow = function (element, currentDate, events) {
        var weight = 0;
        if (events.length != 0) {
            weight = 28 / (events.length);
        }
        if (weight > 0) {
            var boxShadow = '';
            for (var i = 0; i < events.length; i++) {
                if (boxShadow != '') {
                    boxShadow += ",";
                }
                boxShadow += "inset 0 -" + ((i + 1) * weight /*+ (maxEventsInMonth - events.length) * weight*/) + "px 0 0 " + events[i].color;
            }
            element.parentElement.style.boxShadow = boxShadow;
        }
    }

    var OrderStatus = function (element, currentDate, events) {
        var weight = 3;
        if (weight > 0) {
            var boxShadow = '';
            var pending = false, accept = false, denied = false;
            for (var i = 0; i < events.length; i++) {
                if (events[i].status == -1 && denied == false) {
                    denied = true;
                }
                if (events[i].status == 0 && pending == false) {
                    pending = true;
                }
                if (events[i].status == 1 && accept == false) {
                    accept = true;
                }
            }
            var multiply = 1;
            if (accept == true) {
                boxShadow += "inset 0 -" + (multiply) * weight + "px 0 0 " + '#40ff40';
                multiply++;
            }
            if (pending == true) {
                if (boxShadow != '') boxShadow += ",";
                boxShadow += "inset 0 -" + (multiply) * weight + "px 0 0 " + '#ffff40';
                multiply++;
            }
            if (denied == true) {
                if (boxShadow != '') boxShadow += ",";
                boxShadow += "inset 0 -" + (multiply) * weight + "px 0 0 " + '#ff4040';
            }
            element.parentElement.style.boxShadow = boxShadow;
        }
    }
    calendar.setCustomDataSourceRenderer(Rainbow);
    </script>
    <script>

    </script>
    <script>
        var dataSource = calendar.getDataSource();
        console.log(dataSource);

        function OnSuccess(e) {
            $('#exampleModal .modal-body').text("Success take vacation");
            $('#exampleModal').modal();

            var event = {
                id: $('#event-modal input[name="event-index"]').val(),
                name: $('#event-modal input[name="event-name"]').val(),
                location: $('#event-modal input[name="event-location"]').val(),
                startDate: $('#event-modal input[name="DateStart"]').datepicker('getDate'),
                endDate: $('#event-modal input[name="DateEnd"]').datepicker('getDate')
            }

            var newId = 0;
            for (let i in dataSource) {
                if (dataSource[i].id > newId) {
                    newId = dataSource[i].id;
                }
            }

            newId++;
            event.id = newId;

            dataSource.push(event);
            calendar.setDataSource(dataSource);
        }
    </script>
    <script>
        function OnError(e) {
            $('#exampleModal .modal-body').text("Wrong vacation parameter");
            $('#exampleModal').modal();
        }
    </script>

    <script>
        $('input[type="checkbox"][name="group1[]"]').on('change', function () {
            $('input[name="' + this.name + '"]').not(this).prop('checked', false);
            console.log(this.parentElement.innerText);
            switch (this.parentElement.innerText) {
                case 'Rainbow':
                    calendar.setCustomDataSourceRenderer(Rainbow);
                    break;
                case 'OrderStatus':
                    calendar.setCustomDataSourceRenderer(OrderStatus);
                    break;
                case 'HeatMap':
                    calendar.setCustomDataSourceRenderer(HeatMap);
                    break;
                default:
                    break;
            }
        });

        $('input[type="checkbox"]').on('change', function () {
            switch (this.parentElement.innerText) {
                case 'Hide Denied':
                    hideDenied = !hideDenied;
                    calendar.setDataSource(DataSourceFilter(calendar.getYear()));
                    calendar.render();
                    break;
                case 'Hide Pending':
                    hidePending = !hidePending;
                    calendar.setDataSource(DataSourceFilter(calendar.getYear()));
                    calendar.render();
                    break;
                default:
                    break;
            }
        });
    </script>
}
